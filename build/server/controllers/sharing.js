// Generated by CoffeeScript 1.10.0
var Album, Client, NotificationsHelper, Sharing, answer, async, cache, clearance, clearanceCtl, cozydb, create, getDisplayName, localization, localizationManager, log, updateOrCreate;

async = require('async');

clearance = require('cozy-clearance');

cozydb = require('cozydb');

NotificationsHelper = require('cozy-notifications-helper');

Client = require("request-json").JsonClient;

log = require('printit')({
  prefix: 'sharing'
});

Album = require('../models/album');

Sharing = require('../models/sharing');

localizationManager = require('../helpers/localization_manager');

localization = require('../lib/localization_manager');

module.exports.fetchSharing = function(req, res, next) {
  return Sharing.find(req.params.shareid, (function(_this) {
    return function(err, sharing) {
      if (err) {
        return next(err);
      } else if (!sharing) {
        return res.send(404, {
          error: 'Sharing not found'
        });
      } else {
        console.log('found sharing : ' + JSON.stringify(sharing));
        return res.send(200, sharing);
      }
    };
  })(this));
};

module.exports.updateSharing = function(req, res, next) {
  console.log('answer is : ' + req.body.accepted);
  return Sharing.find(req.body.id, function(err, sharing) {
    if (err) {
      return next(err);
    } else if (!sharing) {
      return res.send(404, {
        error: 'Sharing not found'
      });
    } else {
      return sharing.updateAttributes({
        accepted: req.body.accepted
      }, function(err) {
        if (err) {
          return next(err);
        } else {
          console.log('update ok');
          res.send(200, sharing);
          return answer(sharing, function(err) {
            if (err) {
              return next(err);
            }
          });
        }
      });
    }
  });
};

module.exports.request = function(req, res, next) {
  var attributes;
  console.log('request for a new sharing from proxy');
  console.log('sharing : ' + JSON.stringify(req.body));
  attributes = req.body.request;
  return create(attributes, function(err, sharing) {
    var message, messageKey, notificationSlug, notifier;
    if (sharing === null) {
      if ((err != null) || next(null)) {
        return next(err);
      }
    }
    notifier = new NotificationsHelper('home');
    messageKey = 'notification sharing request';
    message = localization.t(messageKey);
    notificationSlug = "sharing_request_notification";
    return notifier.createOrUpdatePersistent(notificationSlug, {
      app: 'home',
      text: messageKey,
      resource: {
        app: 'home',
        url: "sharing-request/" + sharing.id
      }
    }, function(err) {
      if (err != null) {
        log.error(err);
        return next(err);
      } else {
        return res.send(200);
      }
    });
  });
};

answer = function(sharing, callback) {
  var client, data;
  console.log('answer the source url : ' + JSON.stringify(sharing));
  if (sharing == null) {
    return callback(null);
  }
  data = {
    shareID: sharing.shareID,
    userID: sharing.userID,
    accepted: sharing.accepted
  };
  client = new Client(sharing.url);
  callback(null);
  return client.post("sharing/answer", {
    answer: data
  }, function(err, result, body) {

    /*err = err or body.error
    if err? then next err
    else
        console.log JSON.stringify body
        res.send success: true, msg: body
     */
  });
};

create = function(attributes, callback) {
  var data;
  if (attributes == null) {
    return callback(null);
  }
  console.log('attributes : ' + JSON.stringify(attributes));
  data = {
    url: attributes.url || '/',
    login: attributes.login || '',
    password: attributes.password || '',
    shareID: attributes.shareID || '',
    userID: attributes.userID || '',
    desc: attributes.desc || '',
    accepted: false
  };
  return Sharing.create(data, (function(_this) {
    return function(err, sharing) {
      return callback(err, sharing);
    };
  })(this));
};

updateOrCreate = function(attributes, next) {
  var params;
  if (!req.params.app || !req.params.ref) {
    return res.send(500, {
      error: 'Wrong usage'
    });
  }
  attributes = req.body;
  attributes.type = 'persistent';
  attributes.ref = req.params.ref;
  attributes.app = req.params.app;
  if (attributes.resource == null) {
    attributes.resource = {
      url: attributes.url || '/'
    };
  }
  params = {
    key: [req.params.app, req.params.ref]
  };
  return Notification.request('byApps', params, (function(_this) {
    return function(err, notifs) {
      if (err) {
        return next(err);
      } else if (!notifs || notifs.length === 0) {
        return Notification.create(attributes, function(err, notif) {
          if (err) {
            return next(err);
          } else {
            return res.send(201, notif);
          }
        });
      } else {
        return notifs[0].updateAttributes(attributes, function(err, notif) {
          if (err) {
            return next(err);
          } else {
            return res.send(200, notif);
          }
        });
      }
    };
  })(this));
};

getDisplayName = function(callback) {
  return cozydb.api.getCozyUser(function(err, user) {
    if ((user != null ? user.public_name : void 0) && user.public_name.length > 0) {
      return callback(null, user.public_name);
    } else {
      return localizationManager.ensureReady(function(err) {
        return callback(null, localizationManager.t('default user name'));
      });
    }
  });
};

clearanceCtl = clearance.controller({
  mailTemplate: function(options, callback) {
    return getDisplayName(function(err, displayName) {
      options.displayName = displayName;
      return localizationManager.render('sharemail', options, callback);
    });
  },
  mailSubject: function(options, callback) {
    return getDisplayName(function(err, displayName) {
      return callback(null, localizationManager.t('email sharing subject', {
        displayName: displayName,
        name: options.doc.title
      }));
    });
  }
});

module.exports.fetch = function(req, res, next, id) {
  return Album.find(id, function(err, album) {
    if (album) {
      req.doc = album;
      return next();
    } else {
      err = new Error('bad usage');
      err.status = 400;
      return next(err);
    }
  });
};

module.exports.markPublicRequests = function(req, res, next) {
  if (req.url.match(/^\/public/)) {
    req["public"] = true;
  }
  return next();
};

module.exports.checkPermissions = function(album, req, callback) {
  if (!req["public"]) {
    return callback(null, true);
  }
  if (album.clearance === 'hidden') {
    album.clearance = 'public';
  }
  if (album.clearance === 'private') {
    album.clearance = [];
  }
  return clearance.check(album, 'r', req, callback);
};

cache = {};

module.exports.checkPermissionsPhoto = function(photo, perm, req, callback) {
  var albumid, incache;
  if (!req["public"]) {
    return callback(null, true);
  }
  albumid = photo.albumid;
  incache = cache[albumid];
  if (incache) {
    return clearance.check({
      clearance: incache
    }, perm, req, callback);
  } else {
    return Album.find(albumid, function(err, album) {
      if (err || !album) {
        return callback(null, false);
      }
      if (album.clearance === 'hidden') {
        album.clearance = 'public';
      }
      if (album.clearance === 'private') {
        album.clearance = [];
      }
      cache[albumid] = album.clearance;
      return clearance.check(album, perm, req, callback);
    });
  }
};

module.exports.change = function(req, res, next) {
  cache[req.params.shareid] = null;
  return clearanceCtl.change(req, res, next);
};

module.exports.sendAll = clearanceCtl.sendAll;

module.exports.contactList = clearanceCtl.contactList;

module.exports.contact = clearanceCtl.contact;

module.exports.contactPicture = clearanceCtl.contactPicture;
