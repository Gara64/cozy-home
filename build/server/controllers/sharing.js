// Generated by CoffeeScript 1.10.0
var Album, Client, NotificationsHelper, UserSharing, async, cache, clearance, clearanceCtl, clientDS, cozydb, getDisplayName, localization, localizationManager, log, ref;

async = require('async');

clearance = require('cozy-clearance');

cozydb = require('cozydb');

NotificationsHelper = require('cozy-notifications-helper');

Client = require("request-json").JsonClient;

log = require('printit')({
  prefix: 'sharing'
});

UserSharing = require('../models/usersharing');

Album = require('../models/album');

localizationManager = require('../helpers/localization_manager');

localization = require('../lib/localization_manager');

clientDS = new Client("http://localhost:9101/");

if ((ref = process.env.NODE_ENV) === 'test' || ref === 'production') {
  clientDS.setBasicAuth(process.env.NAME, process.env.TOKEN);
}

module.exports.fetchSharing = function(req, res, next) {
  return UserSharing.find(req.params.shareid, function(err, sharing) {
    if (err) {
      return next(err);
    } else if (!sharing) {
      return res.send(404, {
        error: 'Sharing not found'
      });
    } else {
      console.log('found sharing : ' + JSON.stringify(sharing));
      return res.send(200, sharing);
    }
  });
};

module.exports.updateSharing = function(req, res, next) {
  var answer;
  answer = req.body.accepted;
  console.log('answer is : ' + answer);
  return UserSharing.find(req.body.id, function(err, userSharing) {
    if (err) {
      return next(err);
    } else if (!userSharing) {
      err = new Error("Sharing not found");
      err.status = 404;
      return next(err);
    } else {
      return userSharing.updateAttributes({
        accepted: answer
      }, function(err, sharing) {
        if (err) {
          return next(err);
        } else {
          req.params = userSharing;
          return next();
        }
      });
    }
  });
};

module.exports.request = function(req, res, next) {
  var err, message, messageKey, notificationSlug, notifier;
  console.log('create notif for id ' + req.body.id);
  if (req.body.id == null) {
    err = new Error("Bad request");
    err.status = 400;
    return next(err);
  } else {
    notifier = new NotificationsHelper('home');
    messageKey = 'notification sharing request';
    message = localization.t(messageKey);
    notificationSlug = "sharing_request_notification";
    return notifier.createOrUpdatePersistent(notificationSlug, {
      app: 'home',
      text: messageKey,
      resource: {
        app: 'home',
        url: "sharing-request/" + req.body.id
      }
    }, function(err) {
      if (err != null) {
        log.error(err);
        return next(err);
      } else {
        return res.send(200, {
          success: true
        });
      }
    });
  }
};

module.exports.sendAnswer = function(req, res, next) {
  var err, params;
  params = req.params;
  console.log('params : ' + JSON.stringify(params));
  if (params == null) {
    err = new Error("Bad request");
    err.status = 400;
    return next(err);
  } else {
    return clientDS.post("sharing/sendAnswer", params, function(err, result, body) {
      if (err) {
        return next(err);
      } else {
        return res.send(result.statusCode, body);
      }
    });
  }
};

getDisplayName = function(callback) {
  return cozydb.api.getCozyUser(function(err, user) {
    if ((user != null ? user.public_name : void 0) && user.public_name.length > 0) {
      return callback(null, user.public_name);
    } else {
      return localizationManager.ensureReady(function(err) {
        return callback(null, localizationManager.t('default user name'));
      });
    }
  });
};

clearanceCtl = clearance.controller({
  mailTemplate: function(options, callback) {
    return getDisplayName(function(err, displayName) {
      options.displayName = displayName;
      return localizationManager.render('sharemail', options, callback);
    });
  },
  mailSubject: function(options, callback) {
    return getDisplayName(function(err, displayName) {
      return callback(null, localizationManager.t('email sharing subject', {
        displayName: displayName,
        name: options.doc.title
      }));
    });
  }
});

module.exports.fetch = function(req, res, next, id) {
  return Album.find(id, function(err, album) {
    if (album) {
      req.doc = album;
      return next();
    } else {
      err = new Error('bad usage');
      err.status = 400;
      return next(err);
    }
  });
};

module.exports.markPublicRequests = function(req, res, next) {
  if (req.url.match(/^\/public/)) {
    req["public"] = true;
  }
  return next();
};

module.exports.checkPermissions = function(album, req, callback) {
  if (!req["public"]) {
    return callback(null, true);
  }
  if (album.clearance === 'hidden') {
    album.clearance = 'public';
  }
  if (album.clearance === 'private') {
    album.clearance = [];
  }
  return clearance.check(album, 'r', req, callback);
};

cache = {};

module.exports.checkPermissionsPhoto = function(photo, perm, req, callback) {
  var albumid, incache;
  if (!req["public"]) {
    return callback(null, true);
  }
  albumid = photo.albumid;
  incache = cache[albumid];
  if (incache) {
    return clearance.check({
      clearance: incache
    }, perm, req, callback);
  } else {
    return Album.find(albumid, function(err, album) {
      if (err || !album) {
        return callback(null, false);
      }
      if (album.clearance === 'hidden') {
        album.clearance = 'public';
      }
      if (album.clearance === 'private') {
        album.clearance = [];
      }
      cache[albumid] = album.clearance;
      return clearance.check(album, perm, req, callback);
    });
  }
};

module.exports.change = function(req, res, next) {
  cache[req.params.shareid] = null;
  return clearanceCtl.change(req, res, next);
};

module.exports.sendAll = clearanceCtl.sendAll;

module.exports.contactList = clearanceCtl.contactList;

module.exports.contact = clearanceCtl.contact;

module.exports.contactPicture = clearanceCtl.contactPicture;
